ARM GAS  /tmp/ccaBPWhO.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB66:
  25              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32f1xx_it.c **** /**
   3:Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Src/stm32f1xx_it.c ****   * @attention
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32f1xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f1xx_it.c ****   *
  12:Src/stm32f1xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32f1xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32f1xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Src/stm32f1xx_it.c ****   *                             www.st.com/SLA0044
  16:Src/stm32f1xx_it.c ****   *
  17:Src/stm32f1xx_it.c ****   ******************************************************************************
  18:Src/stm32f1xx_it.c ****   */
  19:Src/stm32f1xx_it.c **** /* USER CODE END Header */
  20:Src/stm32f1xx_it.c **** 
  21:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32f1xx_it.c **** #include "main.h"
  23:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  24:Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  27:Src/stm32f1xx_it.c **** 
  28:Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  29:Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  30:Src/stm32f1xx_it.c **** 
  31:Src/stm32f1xx_it.c **** /* USER CODE END TD */
  32:Src/stm32f1xx_it.c **** 
  33:Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/ccaBPWhO.s 			page 2


  34:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  35:Src/stm32f1xx_it.c ****  
  36:Src/stm32f1xx_it.c **** /* USER CODE END PD */
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  40:Src/stm32f1xx_it.c **** 
  41:Src/stm32f1xx_it.c **** /* USER CODE END PM */
  42:Src/stm32f1xx_it.c **** 
  43:Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  44:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  45:Src/stm32f1xx_it.c **** 
  46:Src/stm32f1xx_it.c **** /* USER CODE END PV */
  47:Src/stm32f1xx_it.c **** 
  48:Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  49:Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  50:Src/stm32f1xx_it.c **** 
  51:Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  52:Src/stm32f1xx_it.c **** 
  53:Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  54:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  57:Src/stm32f1xx_it.c **** 
  58:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  59:Src/stm32f1xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  60:Src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_adc1;
  61:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c1;
  62:Src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  63:Src/stm32f1xx_it.c **** extern RTC_HandleTypeDef hrtc;
  64:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  65:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  66:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim7;
  67:Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim8;
  68:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  69:Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  70:Src/stm32f1xx_it.c **** 
  71:Src/stm32f1xx_it.c **** /* USER CODE END EV */
  72:Src/stm32f1xx_it.c **** 
  73:Src/stm32f1xx_it.c **** /******************************************************************************/
  74:Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */ 
  75:Src/stm32f1xx_it.c **** /******************************************************************************/
  76:Src/stm32f1xx_it.c **** /**
  77:Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
  78:Src/stm32f1xx_it.c ****   */
  79:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  80:Src/stm32f1xx_it.c **** {
  26              		.loc 1 80 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  81:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  82:Src/stm32f1xx_it.c **** 
  83:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  84:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  85:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccaBPWhO.s 			page 3


  86:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  87:Src/stm32f1xx_it.c **** }
  31              		.loc 1 87 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE66:
  36              		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	1
  38              		.global	HardFault_Handler
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HardFault_Handler:
  45              	.LFB67:
  88:Src/stm32f1xx_it.c **** 
  89:Src/stm32f1xx_it.c **** /**
  90:Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
  91:Src/stm32f1xx_it.c ****   */
  92:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  93:Src/stm32f1xx_it.c **** {
  46              		.loc 1 93 0
  47              		.cfi_startproc
  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.L3:
  53 0000 FEE7     		b	.L3
  54              		.cfi_endproc
  55              	.LFE67:
  57              		.section	.text.MemManage_Handler,"ax",%progbits
  58              		.align	1
  59              		.global	MemManage_Handler
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu softvfp
  65              	MemManage_Handler:
  66              	.LFB68:
  94:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  95:Src/stm32f1xx_it.c **** 
  96:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  97:Src/stm32f1xx_it.c ****   while (1)
  98:Src/stm32f1xx_it.c ****   {
  99:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 100:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 101:Src/stm32f1xx_it.c ****   }
 102:Src/stm32f1xx_it.c **** }
 103:Src/stm32f1xx_it.c **** 
 104:Src/stm32f1xx_it.c **** /**
 105:Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 106:Src/stm32f1xx_it.c ****   */
 107:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 108:Src/stm32f1xx_it.c **** {
  67              		.loc 1 108 0
  68              		.cfi_startproc
ARM GAS  /tmp/ccaBPWhO.s 			page 4


  69              		@ Volatile: function does not return.
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.L5:
  74 0000 FEE7     		b	.L5
  75              		.cfi_endproc
  76              	.LFE68:
  78              		.section	.text.BusFault_Handler,"ax",%progbits
  79              		.align	1
  80              		.global	BusFault_Handler
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	BusFault_Handler:
  87              	.LFB69:
 109:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 110:Src/stm32f1xx_it.c **** 
 111:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 112:Src/stm32f1xx_it.c ****   while (1)
 113:Src/stm32f1xx_it.c ****   {
 114:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 115:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 116:Src/stm32f1xx_it.c ****   }
 117:Src/stm32f1xx_it.c **** }
 118:Src/stm32f1xx_it.c **** 
 119:Src/stm32f1xx_it.c **** /**
 120:Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 121:Src/stm32f1xx_it.c ****   */
 122:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 123:Src/stm32f1xx_it.c **** {
  88              		.loc 1 123 0
  89              		.cfi_startproc
  90              		@ Volatile: function does not return.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              	.L7:
  95 0000 FEE7     		b	.L7
  96              		.cfi_endproc
  97              	.LFE69:
  99              		.section	.text.UsageFault_Handler,"ax",%progbits
 100              		.align	1
 101              		.global	UsageFault_Handler
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	UsageFault_Handler:
 108              	.LFB70:
 124:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 125:Src/stm32f1xx_it.c **** 
 126:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 127:Src/stm32f1xx_it.c ****   while (1)
 128:Src/stm32f1xx_it.c ****   {
 129:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
ARM GAS  /tmp/ccaBPWhO.s 			page 5


 130:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 131:Src/stm32f1xx_it.c ****   }
 132:Src/stm32f1xx_it.c **** }
 133:Src/stm32f1xx_it.c **** 
 134:Src/stm32f1xx_it.c **** /**
 135:Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 136:Src/stm32f1xx_it.c ****   */
 137:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 138:Src/stm32f1xx_it.c **** {
 109              		.loc 1 138 0
 110              		.cfi_startproc
 111              		@ Volatile: function does not return.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.L9:
 116 0000 FEE7     		b	.L9
 117              		.cfi_endproc
 118              	.LFE70:
 120              		.section	.text.SVC_Handler,"ax",%progbits
 121              		.align	1
 122              		.global	SVC_Handler
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	SVC_Handler:
 129              	.LFB71:
 139:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 140:Src/stm32f1xx_it.c **** 
 141:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 142:Src/stm32f1xx_it.c ****   while (1)
 143:Src/stm32f1xx_it.c ****   {
 144:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 145:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 146:Src/stm32f1xx_it.c ****   }
 147:Src/stm32f1xx_it.c **** }
 148:Src/stm32f1xx_it.c **** 
 149:Src/stm32f1xx_it.c **** /**
 150:Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 151:Src/stm32f1xx_it.c ****   */
 152:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 153:Src/stm32f1xx_it.c **** {
 130              		.loc 1 153 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 154:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 155:Src/stm32f1xx_it.c **** 
 156:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 157:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 158:Src/stm32f1xx_it.c **** 
 159:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 160:Src/stm32f1xx_it.c **** }
 135              		.loc 1 160 0
 136 0000 7047     		bx	lr
ARM GAS  /tmp/ccaBPWhO.s 			page 6


 137              		.cfi_endproc
 138              	.LFE71:
 140              		.section	.text.DebugMon_Handler,"ax",%progbits
 141              		.align	1
 142              		.global	DebugMon_Handler
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu softvfp
 148              	DebugMon_Handler:
 149              	.LFB72:
 161:Src/stm32f1xx_it.c **** 
 162:Src/stm32f1xx_it.c **** /**
 163:Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
 164:Src/stm32f1xx_it.c ****   */
 165:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 166:Src/stm32f1xx_it.c **** {
 150              		.loc 1 166 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 167:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 168:Src/stm32f1xx_it.c **** 
 169:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 170:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 171:Src/stm32f1xx_it.c **** 
 172:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 173:Src/stm32f1xx_it.c **** }
 155              		.loc 1 173 0
 156 0000 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE72:
 160              		.section	.text.PendSV_Handler,"ax",%progbits
 161              		.align	1
 162              		.global	PendSV_Handler
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	PendSV_Handler:
 169              	.LFB73:
 174:Src/stm32f1xx_it.c **** 
 175:Src/stm32f1xx_it.c **** /**
 176:Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 177:Src/stm32f1xx_it.c ****   */
 178:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 179:Src/stm32f1xx_it.c **** {
 170              		.loc 1 179 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 180:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 181:Src/stm32f1xx_it.c **** 
 182:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 183:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
ARM GAS  /tmp/ccaBPWhO.s 			page 7


 184:Src/stm32f1xx_it.c **** 
 185:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 186:Src/stm32f1xx_it.c **** }
 175              		.loc 1 186 0
 176 0000 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE73:
 180              		.section	.text.SysTick_Handler,"ax",%progbits
 181              		.align	1
 182              		.global	SysTick_Handler
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	SysTick_Handler:
 189              	.LFB74:
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c **** /**
 189:Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 190:Src/stm32f1xx_it.c ****   */
 191:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 192:Src/stm32f1xx_it.c **** {
 190              		.loc 1 192 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 08B5     		push	{r3, lr}
 195              	.LCFI0:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 193:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 194:Src/stm32f1xx_it.c **** 
 195:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 196:Src/stm32f1xx_it.c ****   HAL_IncTick();
 199              		.loc 1 196 0
 200 0002 FFF7FEFF 		bl	HAL_IncTick
 201              	.LVL0:
 197:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 198:Src/stm32f1xx_it.c **** 
 199:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 200:Src/stm32f1xx_it.c **** }
 202              		.loc 1 200 0
 203 0006 08BD     		pop	{r3, pc}
 204              		.cfi_endproc
 205              	.LFE74:
 207              		.section	.text.RTC_IRQHandler,"ax",%progbits
 208              		.align	1
 209              		.global	RTC_IRQHandler
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu softvfp
 215              	RTC_IRQHandler:
 216              	.LFB75:
 201:Src/stm32f1xx_it.c **** 
 202:Src/stm32f1xx_it.c **** /******************************************************************************/
ARM GAS  /tmp/ccaBPWhO.s 			page 8


 203:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 204:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 205:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 206:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 207:Src/stm32f1xx_it.c **** /******************************************************************************/
 208:Src/stm32f1xx_it.c **** 
 209:Src/stm32f1xx_it.c **** /**
 210:Src/stm32f1xx_it.c ****   * @brief This function handles RTC global interrupt.
 211:Src/stm32f1xx_it.c ****   */
 212:Src/stm32f1xx_it.c **** void RTC_IRQHandler(void)
 213:Src/stm32f1xx_it.c **** {
 217              		.loc 1 213 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI1:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
 214:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN RTC_IRQn 0 */
 215:Src/stm32f1xx_it.c **** 
 216:Src/stm32f1xx_it.c ****   /* USER CODE END RTC_IRQn 0 */
 217:Src/stm32f1xx_it.c ****   HAL_RTCEx_RTCIRQHandler(&hrtc);
 226              		.loc 1 217 0
 227 0002 0248     		ldr	r0, .L17
 228 0004 FFF7FEFF 		bl	HAL_RTCEx_RTCIRQHandler
 229              	.LVL1:
 218:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN RTC_IRQn 1 */
 219:Src/stm32f1xx_it.c **** 
 220:Src/stm32f1xx_it.c ****   /* USER CODE END RTC_IRQn 1 */
 221:Src/stm32f1xx_it.c **** }
 230              		.loc 1 221 0
 231 0008 08BD     		pop	{r3, pc}
 232              	.L18:
 233 000a 00BF     		.align	2
 234              	.L17:
 235 000c 00000000 		.word	hrtc
 236              		.cfi_endproc
 237              	.LFE75:
 239              		.section	.text.RCC_IRQHandler,"ax",%progbits
 240              		.align	1
 241              		.global	RCC_IRQHandler
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 245              		.fpu softvfp
 247              	RCC_IRQHandler:
 248              	.LFB76:
 222:Src/stm32f1xx_it.c **** 
 223:Src/stm32f1xx_it.c **** /**
 224:Src/stm32f1xx_it.c ****   * @brief This function handles RCC global interrupt.
 225:Src/stm32f1xx_it.c ****   */
 226:Src/stm32f1xx_it.c **** void RCC_IRQHandler(void)
 227:Src/stm32f1xx_it.c **** {
 249              		.loc 1 227 0
 250              		.cfi_startproc
ARM GAS  /tmp/ccaBPWhO.s 			page 9


 251              		@ args = 0, pretend = 0, frame = 0
 252              		@ frame_needed = 0, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 228:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN RCC_IRQn 0 */
 229:Src/stm32f1xx_it.c **** 
 230:Src/stm32f1xx_it.c ****   /* USER CODE END RCC_IRQn 0 */
 231:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN RCC_IRQn 1 */
 232:Src/stm32f1xx_it.c **** 
 233:Src/stm32f1xx_it.c ****   /* USER CODE END RCC_IRQn 1 */
 234:Src/stm32f1xx_it.c **** }
 254              		.loc 1 234 0
 255 0000 7047     		bx	lr
 256              		.cfi_endproc
 257              	.LFE76:
 259              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 260              		.align	1
 261              		.global	DMA1_Channel1_IRQHandler
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu softvfp
 267              	DMA1_Channel1_IRQHandler:
 268              	.LFB77:
 235:Src/stm32f1xx_it.c **** 
 236:Src/stm32f1xx_it.c **** /**
 237:Src/stm32f1xx_it.c ****   * @brief This function handles DMA1 channel1 global interrupt.
 238:Src/stm32f1xx_it.c ****   */
 239:Src/stm32f1xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 240:Src/stm32f1xx_it.c **** {
 269              		.loc 1 240 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273 0000 08B5     		push	{r3, lr}
 274              	.LCFI2:
 275              		.cfi_def_cfa_offset 8
 276              		.cfi_offset 3, -8
 277              		.cfi_offset 14, -4
 241:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 242:Src/stm32f1xx_it.c **** 
 243:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 0 */
 244:Src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_adc1);
 278              		.loc 1 244 0
 279 0002 0248     		ldr	r0, .L22
 280 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 281              	.LVL2:
 245:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 246:Src/stm32f1xx_it.c **** 
 247:Src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 1 */
 248:Src/stm32f1xx_it.c **** }
 282              		.loc 1 248 0
 283 0008 08BD     		pop	{r3, pc}
 284              	.L23:
 285 000a 00BF     		.align	2
 286              	.L22:
 287 000c 00000000 		.word	hdma_adc1
 288              		.cfi_endproc
ARM GAS  /tmp/ccaBPWhO.s 			page 10


 289              	.LFE77:
 291              		.section	.text.USB_LP_CAN1_RX0_IRQHandler,"ax",%progbits
 292              		.align	1
 293              		.global	USB_LP_CAN1_RX0_IRQHandler
 294              		.syntax unified
 295              		.thumb
 296              		.thumb_func
 297              		.fpu softvfp
 299              	USB_LP_CAN1_RX0_IRQHandler:
 300              	.LFB78:
 249:Src/stm32f1xx_it.c **** 
 250:Src/stm32f1xx_it.c **** /**
 251:Src/stm32f1xx_it.c ****   * @brief This function handles USB low priority or CAN RX0 interrupts.
 252:Src/stm32f1xx_it.c ****   */
 253:Src/stm32f1xx_it.c **** void USB_LP_CAN1_RX0_IRQHandler(void)
 254:Src/stm32f1xx_it.c **** {
 301              		.loc 1 254 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 0
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 305 0000 08B5     		push	{r3, lr}
 306              	.LCFI3:
 307              		.cfi_def_cfa_offset 8
 308              		.cfi_offset 3, -8
 309              		.cfi_offset 14, -4
 255:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
 256:Src/stm32f1xx_it.c **** 
 257:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
 258:Src/stm32f1xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 310              		.loc 1 258 0
 311 0002 0248     		ldr	r0, .L26
 312 0004 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 313              	.LVL3:
 259:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
 260:Src/stm32f1xx_it.c **** 
 261:Src/stm32f1xx_it.c ****   /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
 262:Src/stm32f1xx_it.c **** }
 314              		.loc 1 262 0
 315 0008 08BD     		pop	{r3, pc}
 316              	.L27:
 317 000a 00BF     		.align	2
 318              	.L26:
 319 000c 00000000 		.word	hpcd_USB_FS
 320              		.cfi_endproc
 321              	.LFE78:
 323              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 324              		.align	1
 325              		.global	TIM2_IRQHandler
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu softvfp
 331              	TIM2_IRQHandler:
 332              	.LFB79:
 263:Src/stm32f1xx_it.c **** 
 264:Src/stm32f1xx_it.c **** /**
 265:Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
ARM GAS  /tmp/ccaBPWhO.s 			page 11


 266:Src/stm32f1xx_it.c ****   */
 267:Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 268:Src/stm32f1xx_it.c **** {
 333              		.loc 1 268 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337 0000 08B5     		push	{r3, lr}
 338              	.LCFI4:
 339              		.cfi_def_cfa_offset 8
 340              		.cfi_offset 3, -8
 341              		.cfi_offset 14, -4
 269:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 270:Src/stm32f1xx_it.c **** 
 271:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 272:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 342              		.loc 1 272 0
 343 0002 0248     		ldr	r0, .L30
 344 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 345              	.LVL4:
 273:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 274:Src/stm32f1xx_it.c **** 
 275:Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 276:Src/stm32f1xx_it.c **** }
 346              		.loc 1 276 0
 347 0008 08BD     		pop	{r3, pc}
 348              	.L31:
 349 000a 00BF     		.align	2
 350              	.L30:
 351 000c 00000000 		.word	htim2
 352              		.cfi_endproc
 353              	.LFE79:
 355              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 356              		.align	1
 357              		.global	TIM4_IRQHandler
 358              		.syntax unified
 359              		.thumb
 360              		.thumb_func
 361              		.fpu softvfp
 363              	TIM4_IRQHandler:
 364              	.LFB80:
 277:Src/stm32f1xx_it.c **** 
 278:Src/stm32f1xx_it.c **** /**
 279:Src/stm32f1xx_it.c ****   * @brief This function handles TIM4 global interrupt.
 280:Src/stm32f1xx_it.c ****   */
 281:Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 282:Src/stm32f1xx_it.c **** {
 365              		.loc 1 282 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 0, uses_anonymous_args = 0
 369 0000 08B5     		push	{r3, lr}
 370              	.LCFI5:
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 3, -8
 373              		.cfi_offset 14, -4
 283:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
ARM GAS  /tmp/ccaBPWhO.s 			page 12


 284:Src/stm32f1xx_it.c **** 
 285:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 286:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 374              		.loc 1 286 0
 375 0002 0248     		ldr	r0, .L34
 376 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 377              	.LVL5:
 287:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 288:Src/stm32f1xx_it.c **** 
 289:Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 290:Src/stm32f1xx_it.c **** }
 378              		.loc 1 290 0
 379 0008 08BD     		pop	{r3, pc}
 380              	.L35:
 381 000a 00BF     		.align	2
 382              	.L34:
 383 000c 00000000 		.word	htim4
 384              		.cfi_endproc
 385              	.LFE80:
 387              		.section	.text.I2C1_EV_IRQHandler,"ax",%progbits
 388              		.align	1
 389              		.global	I2C1_EV_IRQHandler
 390              		.syntax unified
 391              		.thumb
 392              		.thumb_func
 393              		.fpu softvfp
 395              	I2C1_EV_IRQHandler:
 396              	.LFB81:
 291:Src/stm32f1xx_it.c **** 
 292:Src/stm32f1xx_it.c **** /**
 293:Src/stm32f1xx_it.c ****   * @brief This function handles I2C1 event interrupt.
 294:Src/stm32f1xx_it.c ****   */
 295:Src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 296:Src/stm32f1xx_it.c **** {
 397              		.loc 1 296 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 0, uses_anonymous_args = 0
 401 0000 08B5     		push	{r3, lr}
 402              	.LCFI6:
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 3, -8
 405              		.cfi_offset 14, -4
 297:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 0 */
 298:Src/stm32f1xx_it.c **** 
 299:Src/stm32f1xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 0 */
 300:Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c1);
 406              		.loc 1 300 0
 407 0002 0248     		ldr	r0, .L38
 408 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 409              	.LVL6:
 301:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C1_EV_IRQn 1 */
 302:Src/stm32f1xx_it.c **** 
 303:Src/stm32f1xx_it.c ****   /* USER CODE END I2C1_EV_IRQn 1 */
 304:Src/stm32f1xx_it.c **** }
 410              		.loc 1 304 0
 411 0008 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccaBPWhO.s 			page 13


 412              	.L39:
 413 000a 00BF     		.align	2
 414              	.L38:
 415 000c 00000000 		.word	hi2c1
 416              		.cfi_endproc
 417              	.LFE81:
 419              		.section	.text.I2C1_ER_IRQHandler,"ax",%progbits
 420              		.align	1
 421              		.global	I2C1_ER_IRQHandler
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu softvfp
 427              	I2C1_ER_IRQHandler:
 428              	.LFB82:
 305:Src/stm32f1xx_it.c **** 
 306:Src/stm32f1xx_it.c **** /**
 307:Src/stm32f1xx_it.c ****   * @brief This function handles I2C1 error interrupt.
 308:Src/stm32f1xx_it.c ****   */
 309:Src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 310:Src/stm32f1xx_it.c **** {
 429              		.loc 1 310 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433 0000 08B5     		push	{r3, lr}
 434              	.LCFI7:
 435              		.cfi_def_cfa_offset 8
 436              		.cfi_offset 3, -8
 437              		.cfi_offset 14, -4
 311:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 0 */
 312:Src/stm32f1xx_it.c **** 
 313:Src/stm32f1xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 0 */
 314:Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c1);
 438              		.loc 1 314 0
 439 0002 0248     		ldr	r0, .L42
 440 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 441              	.LVL7:
 315:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C1_ER_IRQn 1 */
 316:Src/stm32f1xx_it.c **** 
 317:Src/stm32f1xx_it.c ****   /* USER CODE END I2C1_ER_IRQn 1 */
 318:Src/stm32f1xx_it.c **** }
 442              		.loc 1 318 0
 443 0008 08BD     		pop	{r3, pc}
 444              	.L43:
 445 000a 00BF     		.align	2
 446              	.L42:
 447 000c 00000000 		.word	hi2c1
 448              		.cfi_endproc
 449              	.LFE82:
 451              		.section	.text.I2C2_EV_IRQHandler,"ax",%progbits
 452              		.align	1
 453              		.global	I2C2_EV_IRQHandler
 454              		.syntax unified
 455              		.thumb
 456              		.thumb_func
 457              		.fpu softvfp
ARM GAS  /tmp/ccaBPWhO.s 			page 14


 459              	I2C2_EV_IRQHandler:
 460              	.LFB83:
 319:Src/stm32f1xx_it.c **** 
 320:Src/stm32f1xx_it.c **** /**
 321:Src/stm32f1xx_it.c ****   * @brief This function handles I2C2 event interrupt.
 322:Src/stm32f1xx_it.c ****   */
 323:Src/stm32f1xx_it.c **** void I2C2_EV_IRQHandler(void)
 324:Src/stm32f1xx_it.c **** {
 461              		.loc 1 324 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465 0000 08B5     		push	{r3, lr}
 466              	.LCFI8:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 3, -8
 469              		.cfi_offset 14, -4
 325:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_EV_IRQn 0 */
 326:Src/stm32f1xx_it.c **** 
 327:Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_EV_IRQn 0 */
 328:Src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 470              		.loc 1 328 0
 471 0002 0248     		ldr	r0, .L46
 472 0004 FFF7FEFF 		bl	HAL_I2C_EV_IRQHandler
 473              	.LVL8:
 329:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_EV_IRQn 1 */
 330:Src/stm32f1xx_it.c **** 
 331:Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_EV_IRQn 1 */
 332:Src/stm32f1xx_it.c **** }
 474              		.loc 1 332 0
 475 0008 08BD     		pop	{r3, pc}
 476              	.L47:
 477 000a 00BF     		.align	2
 478              	.L46:
 479 000c 00000000 		.word	hi2c2
 480              		.cfi_endproc
 481              	.LFE83:
 483              		.section	.text.I2C2_ER_IRQHandler,"ax",%progbits
 484              		.align	1
 485              		.global	I2C2_ER_IRQHandler
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu softvfp
 491              	I2C2_ER_IRQHandler:
 492              	.LFB84:
 333:Src/stm32f1xx_it.c **** 
 334:Src/stm32f1xx_it.c **** /**
 335:Src/stm32f1xx_it.c ****   * @brief This function handles I2C2 error interrupt.
 336:Src/stm32f1xx_it.c ****   */
 337:Src/stm32f1xx_it.c **** void I2C2_ER_IRQHandler(void)
 338:Src/stm32f1xx_it.c **** {
 493              		.loc 1 338 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 0
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 497 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccaBPWhO.s 			page 15


 498              	.LCFI9:
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 3, -8
 501              		.cfi_offset 14, -4
 339:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 0 */
 340:Src/stm32f1xx_it.c **** 
 341:Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 0 */
 342:Src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 502              		.loc 1 342 0
 503 0002 0248     		ldr	r0, .L50
 504 0004 FFF7FEFF 		bl	HAL_I2C_ER_IRQHandler
 505              	.LVL9:
 343:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN I2C2_ER_IRQn 1 */
 344:Src/stm32f1xx_it.c **** 
 345:Src/stm32f1xx_it.c ****   /* USER CODE END I2C2_ER_IRQn 1 */
 346:Src/stm32f1xx_it.c **** }
 506              		.loc 1 346 0
 507 0008 08BD     		pop	{r3, pc}
 508              	.L51:
 509 000a 00BF     		.align	2
 510              	.L50:
 511 000c 00000000 		.word	hi2c2
 512              		.cfi_endproc
 513              	.LFE84:
 515              		.section	.text.USART2_IRQHandler,"ax",%progbits
 516              		.align	1
 517              		.global	USART2_IRQHandler
 518              		.syntax unified
 519              		.thumb
 520              		.thumb_func
 521              		.fpu softvfp
 523              	USART2_IRQHandler:
 524              	.LFB85:
 347:Src/stm32f1xx_it.c **** 
 348:Src/stm32f1xx_it.c **** /**
 349:Src/stm32f1xx_it.c ****   * @brief This function handles USART2 global interrupt.
 350:Src/stm32f1xx_it.c ****   */
 351:Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 352:Src/stm32f1xx_it.c **** {
 525              		.loc 1 352 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529 0000 08B5     		push	{r3, lr}
 530              	.LCFI10:
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 3, -8
 533              		.cfi_offset 14, -4
 353:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 354:Src/stm32f1xx_it.c **** 
 355:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 356:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 534              		.loc 1 356 0
 535 0002 0248     		ldr	r0, .L54
 536 0004 FFF7FEFF 		bl	HAL_UART_IRQHandler
 537              	.LVL10:
 357:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
ARM GAS  /tmp/ccaBPWhO.s 			page 16


 358:Src/stm32f1xx_it.c **** 
 359:Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 360:Src/stm32f1xx_it.c **** }
 538              		.loc 1 360 0
 539 0008 08BD     		pop	{r3, pc}
 540              	.L55:
 541 000a 00BF     		.align	2
 542              	.L54:
 543 000c 00000000 		.word	huart2
 544              		.cfi_endproc
 545              	.LFE85:
 547              		.section	.text.TIM8_UP_IRQHandler,"ax",%progbits
 548              		.align	1
 549              		.global	TIM8_UP_IRQHandler
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu softvfp
 555              	TIM8_UP_IRQHandler:
 556              	.LFB86:
 361:Src/stm32f1xx_it.c **** 
 362:Src/stm32f1xx_it.c **** /**
 363:Src/stm32f1xx_it.c ****   * @brief This function handles TIM8 update interrupt.
 364:Src/stm32f1xx_it.c ****   */
 365:Src/stm32f1xx_it.c **** void TIM8_UP_IRQHandler(void)
 366:Src/stm32f1xx_it.c **** {
 557              		.loc 1 366 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561 0000 08B5     		push	{r3, lr}
 562              	.LCFI11:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 3, -8
 565              		.cfi_offset 14, -4
 367:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM8_UP_IRQn 0 */
 368:Src/stm32f1xx_it.c **** 
 369:Src/stm32f1xx_it.c ****   /* USER CODE END TIM8_UP_IRQn 0 */
 370:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim8);
 566              		.loc 1 370 0
 567 0002 0248     		ldr	r0, .L58
 568 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 569              	.LVL11:
 371:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM8_UP_IRQn 1 */
 372:Src/stm32f1xx_it.c **** 
 373:Src/stm32f1xx_it.c ****   /* USER CODE END TIM8_UP_IRQn 1 */
 374:Src/stm32f1xx_it.c **** }
 570              		.loc 1 374 0
 571 0008 08BD     		pop	{r3, pc}
 572              	.L59:
 573 000a 00BF     		.align	2
 574              	.L58:
 575 000c 00000000 		.word	htim8
 576              		.cfi_endproc
 577              	.LFE86:
 579              		.section	.text.TIM7_IRQHandler,"ax",%progbits
 580              		.align	1
ARM GAS  /tmp/ccaBPWhO.s 			page 17


 581              		.global	TIM7_IRQHandler
 582              		.syntax unified
 583              		.thumb
 584              		.thumb_func
 585              		.fpu softvfp
 587              	TIM7_IRQHandler:
 588              	.LFB87:
 375:Src/stm32f1xx_it.c **** 
 376:Src/stm32f1xx_it.c **** /**
 377:Src/stm32f1xx_it.c ****   * @brief This function handles TIM7 global interrupt.
 378:Src/stm32f1xx_it.c ****   */
 379:Src/stm32f1xx_it.c **** void TIM7_IRQHandler(void)
 380:Src/stm32f1xx_it.c **** {
 589              		.loc 1 380 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 0
 592              		@ frame_needed = 0, uses_anonymous_args = 0
 593 0000 08B5     		push	{r3, lr}
 594              	.LCFI12:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 3, -8
 597              		.cfi_offset 14, -4
 381:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 0 */
 382:Src/stm32f1xx_it.c **** 
 383:Src/stm32f1xx_it.c ****   /* USER CODE END TIM7_IRQn 0 */
 384:Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim7);
 598              		.loc 1 384 0
 599 0002 0248     		ldr	r0, .L62
 600 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 601              	.LVL12:
 385:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM7_IRQn 1 */
 386:Src/stm32f1xx_it.c **** 
 387:Src/stm32f1xx_it.c ****   /* USER CODE END TIM7_IRQn 1 */
 388:Src/stm32f1xx_it.c **** }
 602              		.loc 1 388 0
 603 0008 08BD     		pop	{r3, pc}
 604              	.L63:
 605 000a 00BF     		.align	2
 606              	.L62:
 607 000c 00000000 		.word	htim7
 608              		.cfi_endproc
 609              	.LFE87:
 611              		.text
 612              	.Letext0:
 613              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 614              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 615              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 616              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 617              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 618              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 619              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 620              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 621              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 622              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 623              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 624              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 625              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc.h"
ARM GAS  /tmp/ccaBPWhO.s 			page 18


 626              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 627              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 628              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_ll_usb.h"
 629              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_pcd.h"
 630              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 631              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rtc_ex.h"
ARM GAS  /tmp/ccaBPWhO.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccaBPWhO.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccaBPWhO.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:44     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccaBPWhO.s:58     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:65     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccaBPWhO.s:79     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:86     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccaBPWhO.s:100    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:107    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccaBPWhO.s:121    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:128    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccaBPWhO.s:141    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:148    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccaBPWhO.s:161    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:168    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccaBPWhO.s:181    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccaBPWhO.s:188    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccaBPWhO.s:208    .text.RTC_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:215    .text.RTC_IRQHandler:0000000000000000 RTC_IRQHandler
     /tmp/ccaBPWhO.s:235    .text.RTC_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:240    .text.RCC_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:247    .text.RCC_IRQHandler:0000000000000000 RCC_IRQHandler
     /tmp/ccaBPWhO.s:260    .text.DMA1_Channel1_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:267    .text.DMA1_Channel1_IRQHandler:0000000000000000 DMA1_Channel1_IRQHandler
     /tmp/ccaBPWhO.s:287    .text.DMA1_Channel1_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:292    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:299    .text.USB_LP_CAN1_RX0_IRQHandler:0000000000000000 USB_LP_CAN1_RX0_IRQHandler
     /tmp/ccaBPWhO.s:319    .text.USB_LP_CAN1_RX0_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:324    .text.TIM2_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:331    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
     /tmp/ccaBPWhO.s:351    .text.TIM2_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:356    .text.TIM4_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:363    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
     /tmp/ccaBPWhO.s:383    .text.TIM4_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:388    .text.I2C1_EV_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:395    .text.I2C1_EV_IRQHandler:0000000000000000 I2C1_EV_IRQHandler
     /tmp/ccaBPWhO.s:415    .text.I2C1_EV_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:420    .text.I2C1_ER_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:427    .text.I2C1_ER_IRQHandler:0000000000000000 I2C1_ER_IRQHandler
     /tmp/ccaBPWhO.s:447    .text.I2C1_ER_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:452    .text.I2C2_EV_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:459    .text.I2C2_EV_IRQHandler:0000000000000000 I2C2_EV_IRQHandler
     /tmp/ccaBPWhO.s:479    .text.I2C2_EV_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:484    .text.I2C2_ER_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:491    .text.I2C2_ER_IRQHandler:0000000000000000 I2C2_ER_IRQHandler
     /tmp/ccaBPWhO.s:511    .text.I2C2_ER_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:516    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:523    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccaBPWhO.s:543    .text.USART2_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:548    .text.TIM8_UP_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:555    .text.TIM8_UP_IRQHandler:0000000000000000 TIM8_UP_IRQHandler
     /tmp/ccaBPWhO.s:575    .text.TIM8_UP_IRQHandler:000000000000000c $d
     /tmp/ccaBPWhO.s:580    .text.TIM7_IRQHandler:0000000000000000 $t
     /tmp/ccaBPWhO.s:587    .text.TIM7_IRQHandler:0000000000000000 TIM7_IRQHandler
ARM GAS  /tmp/ccaBPWhO.s 			page 20


     /tmp/ccaBPWhO.s:607    .text.TIM7_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_RTCEx_RTCIRQHandler
hrtc
HAL_DMA_IRQHandler
hdma_adc1
HAL_PCD_IRQHandler
hpcd_USB_FS
HAL_TIM_IRQHandler
htim2
htim4
HAL_I2C_EV_IRQHandler
hi2c1
HAL_I2C_ER_IRQHandler
hi2c2
HAL_UART_IRQHandler
huart2
htim8
htim7
